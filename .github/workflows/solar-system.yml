
name: Solar System Workflow
# testing

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: 'superuser'
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    
jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v4
          with:
            node-version: 20
    
        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    docker:
      name: Containerization
      needs: [unit-testing]
      permissions:
        packages: write
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4
  
        - name: Dockerhub Login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}
  
        - name: GHCR Login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Docker Build For Testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
  
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP
  
            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live

        - name: Set image name
          run: |
            IMAGE_NAME="ghcr.io/$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')/solar-system:${{ github.sha }}"
            echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

        - name: Container Registry Push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: |
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              ${{ env.IMAGE_NAME }}

    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: docker
      environment: 
        name: development
        url: http://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      runs-on: ubuntu-latest
      outputs:
        APP_INGRESS_HOST: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
      
        - name: Install kubectl cli
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'
        
        # AKS context in Azure
        # - uses: azure/k8s-set-context@v4
        #   with:
        #     method: kubeconfig
        #     kubeconfig: ${{ secrets.KUBECONFIG }}

        # GKE context in GCP
        # Setup gcloud CLI
        - id: 'auth'
          uses: 'google-github-actions/auth@v1'
          with:
            credentials_json: '${{ secrets.GCP_SA_KEY }}'

        - name: Install gke-gcloud-auth-plugin
          run: |
            gcloud components install gke-gcloud-auth-plugin --quiet

        - name: Authenticate GKE and Set kubeconfig
          run: |
            gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_CLUSTER_REGION }}
        
        - name: Fetch Kubernetes Cluster Details
          run: |
            kubectl version --short
            echo -------------------------------
            kubectl get nodes

        - name: Save Nginx Ingress Controller IP as  GITHUB Environment Variable
          run: |
            echo "INGRESS_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> "$GITHUB_ENV"

        - name: Replace Token in Manifest files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            INGRESS_IP: ${{ env.INGRESS_IP }}

        - name: Check files
          run: |
            cat kubernetes/development/*.yaml
        
        - name: Create MongoDB Secret
          run: |
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -

        - name: Deploy to Dev Env
          run: |
            kubectl apply -f kubernetes/development

        - name: Set App Ingress Host URL
          id: set-ingress-host-address
          run: |
            host=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")
            echo "APP_INGRESS_HOST=$host" >> "$GITHUB_OUTPUT"
          
        
    dev-integration-testing:
      if: contains(github.ref, 'feature/')
      name: Dev Integration Testing
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL Output using CURL and JQ
          env:
            URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_HOST }}
          run: |
            echo $URL
            echo "---------------------"
            curl http://$URL/live -s -k | jq -r .status | grep -i live

    prod-deploy:
      if: github.ref == 'refs/heads/main'
      needs: docker
      environment: 
        name: production
        url: http://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      runs-on: ubuntu-latest
      outputs:
        APP_INGRESS_HOST: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
  
        - name: Install kubectl cli
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'
  
        # AKS context in Azure
        # - uses: azure/k8s-set-context@v4
        #   with:
        #     method: kubeconfig
        #     kubeconfig: ${{ secrets.KUBECONFIG }}

        # GKE context in GCP
        - name: install the gcloud cli
          uses: google-github-actions/setup-gcloud@v0
          with:
            project_id: stone-column-459311-v2
            service_account_key: ${{ secrets.GCP_SA_KEY }}
            install_components: 'gke-gcloud-auth-plugin'
            export_default_credentials: true
  
        - name: Fetch Kubernetes Cluster Details
          run: |
            kubectl version --short
            echo -------------------------------
            kubectl get nodes
  
        - name: Save Nginx Ingress Controller IP as GITHUB Environment Variable
          run: |
            echo "INGRESS_IP=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> "$GITHUB_ENV"
  
        - name: Replace Token in Manifest files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/production/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            INGRESS_IP: ${{ env.INGRESS_IP }}
  
        - name: Check files
          run: |
            cat kubernetes/production/*.yaml
  
        - name: Create MongoDB Secret
          run: |
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -
  
        - name: Deploy to Prod Env
          run: |
            kubectl apply -f kubernetes/production
  
        - name: Set App Ingress Host URL
          id: set-ingress-host-address
          run: |
            host=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")
            echo "APP_INGRESS_HOST=$host" >> "$GITHUB_OUTPUT"

    prod-integration-testing:
      if: github.ref == 'refs/heads/main'
      name: Prod Integration Testing
      needs: prod-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL Output using CURL and JQ
          env:
            URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_HOST }}
          run: |
            echo $URL
            echo "---------------------"
            curl http://$URL/live -s -k | jq -r .status | grep -i live
          
  